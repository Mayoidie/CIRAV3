rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is a class representative
    function isClassRepresentative(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'class-representative';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow create access for authenticated users during signup
      allow create: if request.auth != null;
      // Users can read and update their own document if authenticated
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Admins can read/write any user document
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'tickets' collection
    match /tickets/{ticketId} {
      // Allow create access for authenticated users
      allow create: if request.auth != null;

      // Admins can read and write all tickets
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);

      // Class representatives can read all tickets and update any ticket's status (approve/reject)
      // Also allow class reps to delete their own tickets (if they submit one)
      allow read: if request.auth != null && isClassRepresentative(request.auth.uid);
      allow update: if request.auth != null && isClassRepresentative(request.auth.uid);
      allow delete: if request.auth != null && isClassRepresentative(request.auth.uid) && request.auth.uid == resource.data.userId;

      // Students can read and update only their own tickets
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
